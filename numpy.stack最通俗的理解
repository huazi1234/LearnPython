numpy.stack最通俗的理解

 版权声明：本文为博主原创文章，未经博主允许不得转载。有事联系：coordinate@live.com https://blog.csdn.net/qq_17550379/article/details/78934529
numpy.stack(arrays, axis=0)

沿着新轴连接数组的序列。

axis参数指定新轴在结果尺寸中的索引。例如，如果axis=0，它将是第一个维度，如果axis=-1，它将是最后一个维度。

参数： 数组：array_like的序列每个数组必须具有相同的形状。axis：int，可选输入数组沿其堆叠的结果数组中的轴。
返回： 堆叠：ndarray堆叠数组比输入数组多一个维。
上面是官方给出的解释，很难理解。

我们先从增加维度说起。

>>> a = np.array([1, 2, 3])
>>> b = np.array([2, 3, 4])
>>> a.shape
(3,)
>>> b.shape
(3,)
>>> np.stack((a, b), axis=0).shape
(2, 3)
>>> np.stack((a, b), axis=1).shape
(3, 2)

我先说一说这里(2,3)和(3,2)中的2是怎么来的：因为有a和b两个array。如果这里我们增加一个c= np.array([3, 4, 5])，那么这里我们改变原来的np.stack就会变成下面这样：

>>> c = np.array([3, 4, 5])
>>> np.stack((a, b, c), axis=0).shape
(3, 3)
>>> np.stack((a, b, c), axis=1).shape
(3, 3)

那么因为这里是a,b,c三个array，所以这里2变成了3

接着说说这个axis参数的意义，我们可以理解这里的axis就是要增加哪一个维度，比如说这里的axis=0，就是增加第一维度，所以这里的(2,3)中的2在第一个位置。axis=1，就是增加第二维度，所以这里的(3,2)中的2在第二个位置。

我现在举一个稍微复杂的例子

>>> a = np.array([[1, 2, 3], [1, 2, 3], [1, 2, 3]])
>>> b = np.array([[4, 5, 6], [4, 5, 6], [4, 5, 6]])
>>> a.shape
(3, 3)
>>> b.shape
(3, 3)
>>> np.stack((a, b), axis=0).shape
(2, 3, 3)
>>> np.stack((a, b), axis=1).shape
(3, 2, 3)
>>> np.stack((a, b), axis=2).shape
(3, 3, 2)

这里的2就是指的a和b，而2放在什么位置是根据axis来确定的。

接着说一下矩阵的坐标

a			a的元素对应的坐标
[1 2 3]		(0,0) (0,1) (0,2)
[1 2 3]		(1,0) (1,1) (1,2)
[1 2 3]		(2,0) (2,1) (2,2)

很好理解。

接着以np.stack((a, b), axis=1)为例子

>>> np.stack((a, b), axis=1).shape
(3, 2, 3)
>>> np.stack((a, b), axis=1)
array([[[1, 2, 3],
        [4, 5, 6]],

       [[1, 2, 3],
        [4, 5, 6]],

       [[1, 2, 3],
        [4, 5, 6]]])

原来我们a[0][0]=1，现在中间加上一个维度（因为这里axis=1），就变成了a[0][0][0]=1，注意这里为什么中间是0，因为np.stack((a, b), axis=1)中，a在b的前面。同理

a			a的元素对应的坐标
[1 2 3]		(0,0,0) (0,0,1) (0,0,2)
[1 2 3]		(1,0,0) (1,0,1) (1,0,2)
[1 2 3]		(2,0,0) (2,0,1) (2,0,2)

那么b[0][0]=4，因为np.stack((a, b), axis=1)中，b在a的后面。所以b[0][1][0]=4

b			b的元素对应的坐标
[4 5 6]		(0,1,0) (0,1,1) (0,1,2)
[4 5 6]		(1,1,0) (1,1,1) (1,1,2)
[4 5 6]		(2,1,0) (2,1,1) (2,1,2)

接着将对应坐标的数组合，就得到了新的array

					   元素对应的坐标
array([[[1, 2, 3],		(0,0,0) (0,0,1) (0,0,2)
        [4, 5, 6]],		(0,1,0) (0,1,1) (0,1,2)

       [[1, 2, 3],		(1,0,0) (1,0,1) (1,0,2)
        [4, 5, 6]],		(1,1,0) (1,1,1) (1,1,2)

       [[1, 2, 3],		(2,0,0) (2,0,1) (2,0,2)
        [4, 5, 6]]])	(2,1,0) (2,1,1) (2,1,2)

还有一个更加简单的理解方式（堆叠）

对于axis=1，就是横着切开，对应行横着堆


对于axis=2，就是竖着切开，对应行竖着堆


对于axis=0，就是不切开，两个堆一起。

就是这么的简单_!

觉得不错，点个赞吧b(￣▽￣)d
